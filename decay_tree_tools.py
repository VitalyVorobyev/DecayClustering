# -*- coding: utf-8 -*-
"""
Created on Wed Aug 10 11:10:21 2016

@author: Vitaly Vorobyev
"""
import gviz_tools as gvt

b_mesons = (511,-511,521,-521,531,-531)
upsilons = (300553,9000553)

def PerformDecayTreeFiltering(idhep,idx0,daF0,daL0,daF,daL):
    """ Removes 'decays' of stable particles
    Args:
        idhep: array of MC particle codes
        idx0: index of line to begin filtering with
        daF0: unfiltered array of the first descendant indices
        daL0: unfiltered array of the last  descendant indices
        daF: array of len(idhep) size to be filled with the filtered 
             values of the first descendant indices. Should be initialized 
             with -1's at first level of recursion
        daL: array of len(idhep) size to be filled with the filtered 
             values of the  last descendant indices. Should be initialized 
             with -1's at first level of recursion
    Returns:
        Nothing. Result is stored in daF and daL arrays
    """
    if daF0[idx0] == 0:
        return
    for idx in range(daF0[idx0]-1,daL0[idx0]):
        if gvt.is_stable_particle(idhep[idx0]):
            continue
        PerformDecayTreeFiltering(idhep,idx,daF0,daL0,daF,daL)
        daF[idx] = daF0[idx]
        daL[idx] = daL0[idx]

def init_da_list(da,idx):
    """ Retrieves list l of -1 with the idx element equals da[idx] and len(l) == len(da)
    Args:
        da: input list
        idx: index
    Returns:
        List l of -1 with the idx element equals da[idx] and len(l) == len(da)
    """
    return [-1]*idx + [da[idx]] + [-1]*(len(da) - idx - 1)

def FilterDecayTree(idhep,daF0,daL0,idx0):
    """ Removes 'decays' of stable particles. An interface for 
        recursive function PerformDecayTreeFiltering
    Args:
        idhep: array of MC particle codes
        idx0: index of line to begin filtering with
        daF0: unfiltered array of the first descendant indices
        daL0: unfiltered array of the last  descendant indices
    Returns:
        Tuple (daF,daL) of filtered arrays
    """
    daF = init_da_list(daF0,idx0)
    daL = init_da_list(daL0,idx0)
    PerformDecayTreeFiltering(idhep,idx0,daF0,daL0,daF,daL)
    return (daF, daL)

def subdecays(idhep,daF,daL,pids):
    """ Retrieves subdecay trees for the quered MC particle codes
    Args:
        idhep: array of MC particle codes
        daF: array of the first descendant indices
        daF: array of the last  descendant indices
        pids: array of MC particle codes
    Returns:
        Tuple of queried pairs of (daF,daL) arrays
    """
    decay_tree_list = []
    for pid in pids:
        if pid not in idhep:
            continue
        indices = [i for i, x in enumerate(idhep) if x == pid]
        for idx in indices:
            daFnew, daLnew = FilterDecayTree(idhep,daF,daL,idx)
            decay_tree_list.append((daFnew,daLnew))
    return tuple(decay_tree_list)

def gen_table(tree,evt,filtering = False):
    """ Retrieves full table of generatored particles
    Args:
        tree : ROOT TTree
        evt : index of event
        filtering : return filtered tuples if True
    Returns:
        Tuple of three tuples (idhep,daF,daL)
    """
    tree.GetEntry(evt)
    idhep = tuple(tree.gen_idhep)
    # 911 marks the last particle generated by EvtGen
    # (my empirical conclusion)
    if 911 in idhep:
        N = idhep.index(911)
        idhep = idhep[:N]
        daF   = tuple(tree.gen_daF)[:N]
        daL   = tuple(tree.gen_daL)[:N]
    else:
        daF   = tuple(tree.gen_daF)
        daL   = tuple(tree.gen_daL)

    if filtering:
        daFfil, daLfil = FilterDecayTree(idhep,daF,daL,0)
        return (idhep,daFfil,daLfil)
    else:
        return (idhep,daF,daL)

def full_gv_decay_tree(tree,evt):
    """ Retrieves gviz praph for decay tree started from Upsilon(4S) or Upsilon(5S)
    Args:
        tree : ROOT TTree
        evt : index of event
    Returns:
        A graphviz graph
    """
    idhep, daF,daL = gen_table(tree,evt)
    decay_tree = subdecays(idhep,daF,daL,upsilons)[0]
    gv_tree = gvt.decay_tree_gv(idhep,decay_tree[0],decay_tree[1])
    return gv_tree

def b_meson_gv_decay_trees(tree,evt):
    """ Retrieves gviz praphs for all B and Bs decays tree started from Upsilon(4S) or Upsilon(5S)
    Args:
        tree : ROOT TTree
        evt : index of event
    Returns:
        Tuple of graphviz graphs
    """
    idhep, daF,daL = gen_table(tree,evt)
    b_decay_trees = subdecays(idhep,daF,daL,b_mesons)
    gv_trees = tuple([gvt.decay_tree_gv(idhep,bdt[0],bdt[1]) for bdt in b_decay_trees])
    return gv_trees